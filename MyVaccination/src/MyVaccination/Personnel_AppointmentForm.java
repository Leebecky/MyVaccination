/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
 */
package MyVaccination;

import MyVaccination.Classes.Appointment;
import MyVaccination.Classes.Candidate;
import MyVaccination.Classes.Personnel;
import MyVaccination.Classes.Vaccination_Centre;
import MyVaccination.Helper_Classes.LGoodTimePicker_TimeVeto;
import MyVaccination.Helper_Classes.MyVaccination_GeneralFunctions;
import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.components.TimePickerSettings;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.font.TextAttribute;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author leebe
 */
public class Personnel_AppointmentForm extends javax.swing.JFrame {

    String userId = "";
    String id = "";
    Appointment apt;

    /**
     * Creates new form Personnel_AppointmentForm
     */
    public Personnel_AppointmentForm() {
        apt = new Appointment();
        initComponents();

        ImageIcon img = new ImageIcon("src/MyVaccination/Images/Logo_Background1024.jpg");
        this.setIconImage(img.getImage());

        lblViewProfile.setVisible(false);
        lblLogout.setVisible(false);
    }

    public Personnel_AppointmentForm(String userId) {
        this.userId = userId;
        apt = new Appointment();
        initComponents();

        ImageIcon img = new ImageIcon("src/MyVaccination/Images/Logo_Background1024.jpg");
        this.setIconImage(img.getImage());

        Personnel user = Personnel.getPersonnel(userId);

        lblUsername.setText(user.getUsername());

        lblViewProfile.setVisible(false);
        lblLogout.setVisible(false);
    }

    public Personnel_AppointmentForm(String id, String userId) { //Edit mode
        this.id = id;
        this.userId = userId;

        apt = Appointment.getAppointmentDetails(id);

        initComponents();

        Vaccination_Centre selectedVc = Vaccination_Centre.getCentre(apt.getCentreId());
        cmbAptVc.getModel().setSelectedItem(selectedVc);
        cmbAptType.setSelectedItem(apt.getStatus());
        dtAptDateTime.getDatePicker().setDate(apt.getAppointmentDate());
        dtAptDateTime.getTimePicker().setTime(apt.getAppointmentTime());

        LocalTime openingTime = selectedVc.getOpeningTime();
        LocalTime closingTime = selectedVc.getClosingTime();
        dtAptDateTime.timePicker.getSettings().setVetoPolicy(new LGoodTimePicker_TimeVeto(openingTime.getHour(), openingTime.getMinute(), closingTime.getHour(), closingTime.getMinute()));

        List<String> vaccineListModel = new ArrayList<>();
        selectedVc.checkVcSupply().forEach((str, i) -> {
            if (!(i <= 0 || i < selectedVc.getCapacity())) {
                vaccineListModel.add(str);
            }
        });
        
         if (vaccineListModel.isEmpty()) {
                JOptionPane.showMessageDialog(this, "This vaccination centre needs to be resupplied!", "Appointment", JOptionPane.ERROR_MESSAGE);
                btnSave.setEnabled(false);
            } else {
                btnSave.setEnabled(true);
            }
        
        DefaultComboBoxModel cmbModel = new DefaultComboBoxModel(vaccineListModel.toArray());
        cmbAptVaccine.setModel(cmbModel);
        cmbAptVaccine.getModel().setSelectedItem(apt.getVaccineBrand());

        ImageIcon img = new ImageIcon("src/MyVaccination/Images/Logo_Background1024.jpg");
        this.setIconImage(img.getImage());

        Personnel user = Personnel.getPersonnel(userId);

        lblUsername.setText(user.getUsername());

        lblViewProfile.setVisible(false);
        lblLogout.setVisible(false);

        //Disable appointment editing capabilities if there are any candidates
        if (!apt.getCandidateList().isEmpty()) {
            cmbAptVaccine.setEnabled(false);
            cmbAptVc.setEnabled(false);
            dtAptDateTime.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        diaCandidate = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCandidate = new javax.swing.JTable();
        btnAddCandidate = new javax.swing.JButton();
        homePersonnelHeader = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnHome = new javax.swing.JButton();
        lblUsername = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnVcCancel = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        List<String> vcNameList = new ArrayList<>();
        List<Vaccination_Centre> vcList = Vaccination_Centre.getVcFolderData();
        vcList = vcList.stream().filter(vc -> (vc.getStatus().equals("Active"))).toList();
        cmbAptVc = new javax.swing.JComboBox<Vaccination_Centre>(vcList.toArray(new Vaccination_Centre[vcList.size()]));
        jLabel2 = new javax.swing.JLabel();
        cmbAptVaccine = new javax.swing.JComboBox<>();
        TimePickerSettings dtTimeSettings = new TimePickerSettings();
        DatePickerSettings dtDateSettings = new DatePickerSettings();
        dtAptDateTime = new com.github.lgooddatepicker.components.DateTimePicker(dtDateSettings, dtTimeSettings);
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbAptType = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        btnCandidates = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblAptCandidate = new javax.swing.JTable();
        btnRemoveCandidate = new javax.swing.JButton();
        lblViewProfile = new javax.swing.JLabel();
        lblLogout = new javax.swing.JLabel();

        diaCandidate.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        diaCandidate.setTitle("Appointment Potential Candidates");
        diaCandidate.setMinimumSize(new java.awt.Dimension(691, 346));
        diaCandidate.setSize(diaCandidate.getPreferredSize());

        tblCandidate.setModel(Appointment.getAptCandidateTableModel("Potential", apt));
        tblCandidate.setRowHeight(30);
        jScrollPane3.setViewportView(tblCandidate);
        tblCandidate.removeColumn(tblCandidate.getColumnModel().getColumn(0));

        btnAddCandidate.setText("Add Candidate");
        btnAddCandidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCandidateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout diaCandidateLayout = new javax.swing.GroupLayout(diaCandidate.getContentPane());
        diaCandidate.getContentPane().setLayout(diaCandidateLayout);
        diaCandidateLayout.setHorizontalGroup(
            diaCandidateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaCandidateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(diaCandidateLayout.createSequentialGroup()
                .addGap(287, 287, 287)
                .addComponent(btnAddCandidate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        diaCandidateLayout.setVerticalGroup(
            diaCandidateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaCandidateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(btnAddCandidate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyVaccination");
        setMinimumSize(new java.awt.Dimension(945, 523));
        setResizable(false);
        setSize(getPreferredSize());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homePersonnelHeader.setBackground(new java.awt.Color(204, 153, 255));

        jLabel5.setFont(new java.awt.Font("Algerian", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Appointment registration");

        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MyVaccination/Images/Logo_200.png"))); // NOI18N
        btnHome.setBackground(new java.awt.Color(204, 153, 255));
        btnHome.setBorder(null);
        btnHome.setBorderPainted(false);
        btnHome.setContentAreaFilled(false);
        btnHome.setFocusPainted(false);
        btnHome.setFocusable(false);
        btnHome.setRequestFocusEnabled(false);
        btnHome.setRolloverEnabled(false);
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        lblUsername.setText("User Name");
        lblUsername.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(0, 0, 0));
        lblUsername.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblUsernameMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblUsernameMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblUsernameMousePressed(evt);
            }
        });

        javax.swing.GroupLayout homePersonnelHeaderLayout = new javax.swing.GroupLayout(homePersonnelHeader);
        homePersonnelHeader.setLayout(homePersonnelHeaderLayout);
        homePersonnelHeaderLayout.setHorizontalGroup(
            homePersonnelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePersonnelHeaderLayout.createSequentialGroup()
                .addComponent(btnHome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(lblUsername)
                .addGap(23, 23, 23))
        );
        homePersonnelHeaderLayout.setVerticalGroup(
            homePersonnelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePersonnelHeaderLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnHome))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePersonnelHeaderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(homePersonnelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(jLabel5))
                .addGap(14, 14, 14))
        );

        getContentPane().add(homePersonnelHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, -1));

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MyVaccination/Images/Icons/Save.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setBackground(new java.awt.Color(0, 204, 51));
        btnSave.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnSave.setIconTextGap(10);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 430, 105, 39));

        btnVcCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MyVaccination/Images/Icons/Cancel.png"))); // NOI18N
        btnVcCancel.setText("Cancel");
        btnVcCancel.setBackground(new java.awt.Color(204, 51, 0));
        btnVcCancel.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnVcCancel.setIconTextGap(10);
        btnVcCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVcCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnVcCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 430, -1, 39));

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jLabel1.setText("Vaccination Centre :");
        jLabel1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        cmbAptVc.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbAptVc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAptVcItemStateChanged(evt);
            }
        });

        jLabel2.setText("Vaccine Brand :");
        jLabel2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        cmbAptVaccine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please select a Vaccination Centre" }));
        cmbAptVaccine.setEnabled(false);
        cmbAptVaccine.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbAptVaccine.setToolTipText("");

        jLabel3.setText("Appointment Date & Time :");
        jLabel3.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel4.setText("Appointment Status:");
        jLabel4.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        cmbAptType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Closed" }));
        cmbAptType.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 199, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbAptVaccine, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAptVc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbAptType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtAptDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbAptType, dtAptDateTime});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbAptVc, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbAptVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dtAptDateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbAptType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmbAptType, cmbAptVaccine, dtAptDateTime});

        dtAptDateTime.datePicker.setDateToToday();
        if (id.equals("")) {
            dtDateSettings.setDateRangeLimits(LocalDate.now(), LocalDate.now().plusYears(1));
        }

        jTabbedPane1.addTab("Main Details", jPanel1);

        btnCandidates.setText("View Potential Candidates");
        btnCandidates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCandidatesActionPerformed(evt);
            }
        });

        tblAptCandidate.setModel(Appointment.getAptCandidateTableModel(null, apt));
        tblAptCandidate.setRowHeight(30);
        tblAptCandidate.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAptCandidate.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(tblAptCandidate);
        tblAptCandidate.removeColumn(tblAptCandidate.getColumnModel().getColumn(0));

        btnRemoveCandidate.setText("Remove Candidate");
        btnRemoveCandidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveCandidateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(254, 254, 254)
                .addComponent(btnCandidates)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRemoveCandidate)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemoveCandidate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCandidates, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab("Candidates", jPanel2);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 95, -1, 331));

        lblViewProfile.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblViewProfile.setText("View Profile");
        lblViewProfile.setBackground(new java.awt.Color(204, 153, 255));
        lblViewProfile.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        lblViewProfile.setForeground(new java.awt.Color(0, 0, 0));
        lblViewProfile.setOpaque(true);
        lblViewProfile.setToolTipText("");
        lblViewProfile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblViewProfileMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblViewProfileMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblViewProfileMousePressed(evt);
            }
        });
        getContentPane().add(lblViewProfile, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 60, 150, 40));

        lblLogout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogout.setText("Log Out");
        lblLogout.setBackground(new java.awt.Color(204, 153, 255));
        lblLogout.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        lblLogout.setForeground(new java.awt.Color(0, 0, 0));
        lblLogout.setOpaque(true);
        lblLogout.setToolTipText("");
        lblLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblLogoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblLogoutMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblLogoutMousePressed(evt);
            }
        });
        getContentPane().add(lblLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 90, 150, 40));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        int decision = JOptionPane.showConfirmDialog(this, "Warning, no unsaved changes will be saved!", "Cancel Appointment Registration", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);

        // Return to Manage Vaccination Centre page
        if (decision == JOptionPane.OK_OPTION) {
            Personnel_Home home = new Personnel_Home(userId);
            home.setVisible(true);
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        //Data Validation
        if (dtAptDateTime.datePicker.getDate() == null || dtAptDateTime.timePicker.getTime() == null) {
            JOptionPane.showMessageDialog(this, "Please select the appointment date and time!", "Appointment", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String vaccineBrand = cmbAptVaccine.getSelectedItem().toString();

        //Set values
        apt.setAppointmentDate(dtAptDateTime.getDatePicker().getDate());
        apt.setAppointmentTime(dtAptDateTime.getTimePicker().getTime());
        apt.setStatus(cmbAptType.getSelectedItem().toString());

        Vaccination_Centre selectedVc = (Vaccination_Centre) cmbAptVc.getSelectedItem();
        apt.setCentreId(selectedVc.getCentreId());

        //TODO: Need to process vaccine type for batch number
        apt.setVaccineBrand(vaccineBrand);

        boolean success;
        String message = "";

        success = Appointment.updateAppointment(apt);

        if (!id.equals("")) {
            //Edit
            message = "Failed to update record for " + "!";
        } else {
            //New
            message = "Failed to register new vaccination centre!";
        }

        //Verify success of registration
        if (!success) {
            JOptionPane.showMessageDialog(this, message, "Appointment", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Personnel_ManageAppointment aptHome = new Personnel_ManageAppointment(userId);
        aptHome.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnVcCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVcCancelActionPerformed

        //Check if user is certain
        int decision = JOptionPane.showConfirmDialog(this, "Warning, no unsaved changes will be saved!", "Cancel Appointment Registration", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);

        // Return to Manage Vaccination Centre page
        if (decision == JOptionPane.OK_OPTION) {

            this.setVisible(false);
            this.dispose();
            Personnel_ManageAppointment aptHome = new Personnel_ManageAppointment(userId);
            aptHome.setVisible(true);
        }
    }//GEN-LAST:event_btnVcCancelActionPerformed

    private void cmbAptVcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAptVcItemStateChanged
        // Retrieving vaccine based on vaccination centre

        if (evt.getStateChange() == ItemEvent.SELECTED) {
            Vaccination_Centre selectedVc = (Vaccination_Centre) cmbAptVc.getSelectedItem();
            HashMap<String, Integer> vcSupplyList = selectedVc.checkVcSupply();
            Object[] vaccineList = vcSupplyList.keySet().toArray();
            Arrays.sort(vaccineList);
            List<String> vaccineListModel = new ArrayList<>();

            for (int i = 0; i < vaccineList.length; i++) {
                int quantity = vcSupplyList.get(vaccineList[i].toString());
                if (quantity == 0 || quantity < selectedVc.getCapacity()) {
                    continue;
                }

                vaccineListModel.add(vaccineList[i].toString());
            }

            if (vaccineListModel.isEmpty()) {
                JOptionPane.showMessageDialog(this, "This vaccination centre needs to be resupplied!", "Appointment", JOptionPane.ERROR_MESSAGE);
                btnSave.setEnabled(false);
            } else {
                btnSave.setEnabled(true);
            }

            DefaultComboBoxModel cmbModel = new DefaultComboBoxModel(vaccineListModel.toArray());
            cmbAptVaccine.setModel(cmbModel);
            cmbAptVaccine.setEnabled(true);

            LocalTime openingTime = selectedVc.getOpeningTime();
            LocalTime closingTime = selectedVc.getClosingTime();
            dtAptDateTime.timePicker.getSettings().setVetoPolicy(new LGoodTimePicker_TimeVeto(openingTime.getHour(), openingTime.getMinute(), closingTime.getHour(), closingTime.getMinute()));
            dtAptDateTime.timePicker.setTime(null);

        }
    }//GEN-LAST:event_cmbAptVcItemStateChanged

    private void btnCandidatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCandidatesActionPerformed
        if (!btnSave.isEnabled()) {
            JOptionPane.showMessageDialog(this, "No vaccine brand selected!", "Appointment", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Open Potential Candidate dialog

        //Refresh appointment details
        apt.setAppointmentDate(dtAptDateTime.datePicker.getDate());
        apt.setAppointmentTime(dtAptDateTime.getTimePicker().getTime());
        apt.setStatus(cmbAptType.getSelectedItem().toString());
        apt.setVaccineBrand(cmbAptVaccine.getSelectedItem().toString());
        Vaccination_Centre selectedVc = (Vaccination_Centre) cmbAptVc.getSelectedItem();
        apt.setCentreId(selectedVc.getCentreId());

        tblCandidate.setModel(Appointment.getAptCandidateTableModel("Potential", apt));
        tblCandidate.removeColumn(tblCandidate.getColumnModel().getColumn(0));

        if (Appointment.getAptCandidateList(apt).isEmpty()) {
            JOptionPane.showMessageDialog(this, "No potential candidates found!", "Appointment", JOptionPane.ERROR_MESSAGE);
            return;
        }

        diaCandidate.setLocationRelativeTo(this);
        diaCandidate.setVisible(true);
        diaCandidate.setIconImage(this.getIconImage());
    }//GEN-LAST:event_btnCandidatesActionPerformed

    private void btnAddCandidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCandidateActionPerformed
        // Add selected candidates to appointment candidate list
        List<Candidate> candidateList = apt.getCandidateList();
        Vaccination_Centre selectedVc = (Vaccination_Centre) cmbAptVc.getSelectedItem();
        int[] selectedRows = tblCandidate.getSelectedRows();

        candidateList = candidateList.stream().filter(c -> (!(c.getApptStatus().equals("Rejected") || c.getApptStatus().equals("Removed")))).toList();
        int total = candidateList.size() + selectedRows.length;

        //Candidates exceed vaccination centre capacity
        if (total > selectedVc.getCapacity()) {
            int difference = selectedVc.getCapacity() - candidateList.size();
            JOptionPane.showMessageDialog(this, "Maximum number of candidates per appointment exceeded! " + difference + " candidate(s) allowed to be added.", "Appointment", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (int i : selectedRows) {

            String userId = tblCandidate.getModel().getValueAt(i, 0).toString();
            Candidate aptCandidate = new Candidate(userId, "");
            apt.updateAptCandidate(aptCandidate, "Add");
        }

        diaCandidate.setVisible(false);
        diaCandidate.dispose();
        tblAptCandidate.setModel(Appointment.getAptCandidateTableModel(null, apt));
        tblAptCandidate.removeColumn(tblAptCandidate.getColumnModel().getColumn(0));
        tblCandidate.setModel(Appointment.getAptCandidateTableModel("Potential", apt));
        tblCandidate.removeColumn(tblCandidate.getColumnModel().getColumn(0));
    }//GEN-LAST:event_btnAddCandidateActionPerformed

    private void btnRemoveCandidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveCandidateActionPerformed
        // Remove Candidates
        int[] selectedRows = tblAptCandidate.getSelectedRows();

        for (int i : selectedRows) {
            String candidateId = tblAptCandidate.getModel().getValueAt(i, 0).toString();
            String candidateStatus = tblAptCandidate.getModel().getValueAt(i, 2).toString();

            if (candidateStatus.equals("Confirmed") || candidateStatus.equals("Completed") || candidateStatus.equals("Rejected")) {
                JOptionPane.showMessageDialog(this, "This candidate cannot be removed!", "Appointment", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Candidate aptCandidate = new Candidate(candidateId, "");
            apt.updateAptCandidate(aptCandidate, "Remove");
        }

        //Refresh Table Models
        tblAptCandidate.setModel(Appointment.getAptCandidateTableModel(null, apt));
        tblAptCandidate.removeColumn(tblAptCandidate.getColumnModel().getColumn(0));

        tblCandidate.setModel(Appointment.getAptCandidateTableModel("Potential", apt));
        tblCandidate.removeColumn(tblCandidate.getColumnModel().getColumn(0));
    }//GEN-LAST:event_btnRemoveCandidateActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Initialising the Vaccine Type combo box values
        if (userId.equals("")) {
            JOptionPane.showMessageDialog(this, "Please login into the system.", "Error", JOptionPane.ERROR_MESSAGE);
            Login login = new Login();
            login.setVisible(true);
            this.setVisible(false);
        }

        if (id.equals("")) {
            Vaccination_Centre selectedVc = (Vaccination_Centre) cmbAptVc.getSelectedItem();

            HashMap<String, Integer> vcSupplyList = selectedVc.checkVcSupply();
            Object[] vaccineList = vcSupplyList.keySet().toArray();
            Arrays.sort(vaccineList);
            List<String> vaccineListModel = new ArrayList<>();

            for (int i = 0; i < vaccineList.length; i++) {
                int quantity = vcSupplyList.get(vaccineList[i].toString());
                if (quantity == 0 || quantity < selectedVc.getCapacity()) {
                    continue;
                }

                vaccineListModel.add(vaccineList[i].toString());

            }

             if (vaccineListModel.isEmpty()) {
                JOptionPane.showMessageDialog(this, "This vaccination centre needs to be resupplied!", "Appointment", JOptionPane.ERROR_MESSAGE);
                btnSave.setEnabled(false);
            } else {
                btnSave.setEnabled(true);
            }
            
            DefaultComboBoxModel cmbModel = new DefaultComboBoxModel(vaccineListModel.toArray());
            cmbAptVaccine.setModel(cmbModel);
            cmbAptVaccine.setEnabled(true);

            LocalTime openingTime = selectedVc.getOpeningTime();
            LocalTime closingTime = selectedVc.getClosingTime();
            dtAptDateTime.timePicker.getSettings().setVetoPolicy(new LGoodTimePicker_TimeVeto(openingTime.getHour(), openingTime.getMinute(), closingTime.getHour(), closingTime.getMinute()));
        }
    }//GEN-LAST:event_formWindowOpened

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // Checking if candidates should still be allowed to be added
        if (jTabbedPane1.getSelectedIndex() == 1) {

            if (dtAptDateTime.getDatePicker().getDate().isBefore(LocalDate.now()) || cmbAptType.getSelectedItem().equals("Closed")) {
                btnCandidates.setEnabled(false);
            } else {
                btnCandidates.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void lblUsernameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUsernameMouseEntered
        lblUsername.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        Font font = lblUsername.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblUsername.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblUsernameMouseEntered

    private void lblUsernameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUsernameMouseExited
        Font font = lblUsername.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        lblUsername.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblUsernameMouseExited

    private void lblUsernameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUsernameMousePressed
        if (lblLogout.isVisible()) {
            lblViewProfile.setVisible(false);
            lblLogout.setVisible(false);
        } else {
            lblViewProfile.setVisible(true);
            lblLogout.setVisible(true);
        }
    }//GEN-LAST:event_lblUsernameMousePressed

    private void lblViewProfileMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblViewProfileMouseEntered
        lblViewProfile.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        Font font = lblViewProfile.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblViewProfile.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblViewProfileMouseEntered

    private void lblViewProfileMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblViewProfileMouseExited
        Font font = lblViewProfile.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        lblViewProfile.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblViewProfileMouseExited

    private void lblViewProfileMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblViewProfileMousePressed

        Personnel_ViewProfile viewProfile = new Personnel_ViewProfile(userId);
        viewProfile.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_lblViewProfileMousePressed

    private void lblLogoutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseEntered
        lblLogout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        Font font = lblLogout.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblLogout.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblLogoutMouseEntered

    private void lblLogoutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseExited
        Font font = lblLogout.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        lblLogout.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblLogoutMouseExited

    private void lblLogoutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMousePressed
//        Login login = new Login();
//        login.setVisible(true);
//        this.setVisible(false);
//        User user  = User.findUser(userId);
//         logToFile(user.getUserType() + " " + user.username + " has logged out",  "Logout");
        MyVaccination_GeneralFunctions.logout(this, lblUsername.getText());
    }//GEN-LAST:event_lblLogoutMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Personnel_AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Personnel_AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Personnel_AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Personnel_AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Personnel_AppointmentForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCandidate;
    private javax.swing.JButton btnCandidates;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnRemoveCandidate;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnVcCancel;
    private javax.swing.JComboBox<String> cmbAptType;
    private javax.swing.JComboBox<String> cmbAptVaccine;
    private javax.swing.JComboBox<Vaccination_Centre> cmbAptVc;
    private javax.swing.JDialog diaCandidate;
    private com.github.lgooddatepicker.components.DateTimePicker dtAptDateTime;
    private javax.swing.JPanel homePersonnelHeader;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblLogout;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblViewProfile;
    private javax.swing.JTable tblAptCandidate;
    private javax.swing.JTable tblCandidate;
    // End of variables declaration//GEN-END:variables
}
