/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MyVaccination;

import MyVaccination.Classes.*;
import MyVaccination.Helper_Classes.File_Helper;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class User_SubmitAppointment extends javax.swing.JFrame {

    /**
     * Creates new form User_SubmitAppointment
     */
    public User_SubmitAppointment() {
        initComponents();

        lblId.setVisible(false);
        lblViewProfile.setVisible(false);
        lblLogout.setVisible(false);

        ((JLabel) cmbCentre.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        tblAppointment.removeColumn(tblAppointment.getColumnModel().getColumn(0));
        txtVaccineList.setText("");
        txtDose.setText("");
        txtDoseStr.setText("");
    }

    public User_SubmitAppointment(String id) {
        initComponents();

        String userData = File_Helper.readFile("User_Account/" + id + ".txt");
        People userFromFile = File_Helper.gsonWriter.fromJson(userData, People.class);

        lblUsername.setText(userFromFile.getName());
        lblId.setText(id);
        lblId.setVisible(false);
        lblViewProfile.setVisible(false);
        lblLogout.setVisible(false);

        ((JLabel) cmbCentre.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        tblAppointment.removeColumn(tblAppointment.getColumnModel().getColumn(0));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userHeader = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblLogout = new javax.swing.JLabel();
        lblViewProfile = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        cmbCentre = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        lblCentre = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDose = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtVaccineList = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtDoseStr = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        lblLocation = new javax.swing.JLabel();
        lblId = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyVaccination");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userHeader.setBackground(new java.awt.Color(204, 153, 255));

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MyVaccination/Images/Logo_200.png"))); // NOI18N
        lblLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblLogoMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblLogoMousePressed(evt);
            }
        });

        lblUsername.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        lblUsername.setText("User Name");
        lblUsername.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblUsernameMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblUsernameMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblUsernameMousePressed(evt);
            }
        });

        javax.swing.GroupLayout userHeaderLayout = new javax.swing.GroupLayout(userHeader);
        userHeader.setLayout(userHeaderLayout);
        userHeaderLayout.setHorizontalGroup(
            userHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userHeaderLayout.createSequentialGroup()
                .addComponent(lblLogo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 569, Short.MAX_VALUE)
                .addComponent(lblUsername)
                .addGap(21, 21, 21))
        );
        userHeaderLayout.setVerticalGroup(
            userHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLogo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(userHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, -1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Submit Appointment");
        jLabel1.setFont(new java.awt.Font("Algerian", 1, 36)); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 540, -1));

        lblLogout.setBackground(new java.awt.Color(204, 153, 255));
        lblLogout.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        lblLogout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogout.setText("Log Out");
        lblLogout.setToolTipText("");
        lblLogout.setOpaque(true);
        lblLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblLogoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblLogoutMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblLogoutMousePressed(evt);
            }
        });
        getContentPane().add(lblLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 100, 150, 40));

        lblViewProfile.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblViewProfile.setText("View Profile");
        lblViewProfile.setBackground(new java.awt.Color(204, 153, 255));
        lblViewProfile.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        lblViewProfile.setOpaque(true);
        lblViewProfile.setToolTipText("");
        lblViewProfile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblViewProfileMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblViewProfileMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblViewProfileMousePressed(evt);
            }
        });
        getContentPane().add(lblViewProfile, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 66, 150, 40));

        btnSubmit.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        getContentPane().add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 450, 90, 30));

        cmbCentre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCentre.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        getContentPane().add(cmbCentre, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 150, 200, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 153, 255), 2, true));

        lblCentre.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtDose.setColumns(20);
        txtDose.setRows(5);
        txtDose.setText("123 \n0 \n50 \n1 ");
        txtDose.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jScrollPane2.setViewportView(txtDose);

        jScrollPane3.setBorder(null);
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtVaccineList.setColumns(20);
        txtVaccineList.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtVaccineList.setRows(5);
        txtVaccineList.setText("Pfizer\nSinovac\nAstraZeneca\n4th");
        jScrollPane3.setViewportView(txtVaccineList);

        jLabel8.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel8.setText("Vaccine Available:");

        jLabel7.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel7.setText("Centre: ");

        jScrollPane5.setBorder(null);
        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtDoseStr.setColumns(20);
        txtDoseStr.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        txtDoseStr.setRows(5);
        txtDoseStr.setText("supply\nsupply\nsupply\nsupply");
        jScrollPane5.setViewportView(txtDoseStr);

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel9.setText("Location:");

        lblLocation.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(lblCentre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCentre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 210, 280, 220));

        lblId.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblId.setForeground(new java.awt.Color(240, 240, 240));
        lblId.setText("userIc");
        getContentPane().add(lblId, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 440, 80, 40));

        btnSearch.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 150, 90, 30));

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel6.setText("Vaccination Centre : ");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, -1, 30));

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Appointment Date", "Appointment Time", "Vaccine Type"
            }
        ));
        jScrollPane4.setViewportView(tblAppointment);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, -1, 220));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblLogoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoMouseEntered
        lblLogo.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_lblLogoMouseEntered

    private void lblLogoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoMousePressed
        String id = lblId.getText();

        User_Home userHome = new User_Home(id);
        userHome.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_lblLogoMousePressed

    private void lblUsernameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUsernameMouseEntered
        lblUsername.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        Font font = lblUsername.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblUsername.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblUsernameMouseEntered

    private void lblUsernameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUsernameMouseExited
        Font font = lblUsername.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        lblUsername.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblUsernameMouseExited

    private void lblUsernameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUsernameMousePressed
        if (lblLogout.isVisible()) {
            lblViewProfile.setVisible(false);
            lblLogout.setVisible(false);
        } else {
            lblViewProfile.setVisible(true);
            lblLogout.setVisible(true);
        }
    }//GEN-LAST:event_lblUsernameMousePressed

    private void lblLogoutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseEntered
        lblLogout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        Font font = lblLogout.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblLogout.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblLogoutMouseEntered

    private void lblLogoutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseExited
        Font font = lblLogout.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        lblLogout.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblLogoutMouseExited

    private void lblLogoutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMousePressed
        Login login = new Login();
        login.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_lblLogoutMousePressed

    private void lblViewProfileMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblViewProfileMouseEntered
        lblViewProfile.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        Font font = lblViewProfile.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        lblViewProfile.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblViewProfileMouseEntered

    private void lblViewProfileMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblViewProfileMouseExited
        Font font = lblViewProfile.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        lblViewProfile.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_lblViewProfileMouseExited

    private void lblViewProfileMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblViewProfileMousePressed
        String id = lblId.getText();

        User_ViewProfile viewProfile = new User_ViewProfile(id);
        viewProfile.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_lblViewProfileMousePressed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        String id = lblId.getText();
        int selectedRow = tblAppointment.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an appointment!", "Appointment", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int selectedRowIndex = tblAppointment.convertRowIndexToModel(selectedRow);
        String aptId = tblAppointment.getModel().getValueAt(selectedRowIndex, 0).toString();
        String aptData = File_Helper.readFile("Appointment/" + aptId + ".txt");
        Appointment aptFromFile = File_Helper.gsonWriter.fromJson(aptData, Appointment.class);

        Candidate aptCandidate = new Candidate(id, "");
        aptFromFile.updateAptCandidate(aptCandidate, "Add");
        boolean success = Appointment.updateAppointment(aptFromFile);

        if (success) {
            JOptionPane.showMessageDialog(null, "Info Updated!", "Appointment Message", JOptionPane.INFORMATION_MESSAGE);

            User_ViewVaccinationStatus viewStatus = new User_ViewVaccinationStatus(id);
            viewStatus.setVisible(true);
            this.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Appointment submit failed.", "Appointment Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String id = lblId.getText();
        DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
        model.setRowCount(0);

        String selectedCentre = String.valueOf(cmbCentre.getSelectedItem());

        if (selectedCentre.equals("--- Select Centre ---")) {
            lblCentre.setText("");
        } else {
            lblCentre.setText(selectedCentre);
        }

        // Get centre ID
        List<String> centreDataArray = File_Helper.readFolder("Vaccination_Centre");
        List<Vaccination_Centre> centreList = new ArrayList();
        ArrayList<String> selectedCentreId = new ArrayList<String>();

        centreDataArray.forEach(fileInFolder -> {
            centreList.add(File_Helper.gsonWriter.fromJson(fileInFolder, Vaccination_Centre.class));
        });

        for (int i = 0; i < centreList.size(); i++) {
            if (selectedCentre.equals(centreList.get(i).getName())) {
                selectedCentreId.add(centreList.get(i).getCentreId());
                break;
            }
        }

        String centreData = File_Helper.readFile("Vaccination_Centre/" + selectedCentreId.get(0) + ".txt");
        Vaccination_Centre centreFromFile = File_Helper.gsonWriter.fromJson(centreData, Vaccination_Centre.class);
        Location centreLocation = centreFromFile.getLocation();
        String centreState = centreLocation.getState();
        lblLocation.setText(centreState);

        List<Stock> stockList = centreFromFile.getStock();
        Vaccine vaccine;
        ArrayList<String> vaccineNames = new ArrayList<String>();
        ArrayList<String> vaccineQuantity = new ArrayList<String>();
        
        for(int i = 0; i < stockList.size(); i++) {
            vaccine = stockList.get(i).getVaccine();

            vaccineNames.add(vaccine.getName());
            vaccineQuantity.add(String.valueOf(stockList.get(i).getQuantity()));
        }
        
        // Remove duplicate vaccine details
        ArrayList<String> vacName = new ArrayList<String>();
        ArrayList<String> vacQuantity = new ArrayList<String>();

        for (String element : vaccineNames) {
            if (!vacName.contains(element)) {

                vacName.add(element);
            }
        }

        for (String element : vaccineQuantity) {
            if (!vacQuantity.contains(element)) {

                vacQuantity.add(element);
            }
        }
        
        int count = 0;
        for (String element : vacName) {
            if(count == 0){
                txtVaccineList.setText(element);
            }else{
                txtVaccineList.setText(txtVaccineList.getText() + "\n" + element);
            }
            count++;
        }
        
        count = 0;
        for (String element : vacQuantity) {
            if(count == 0){
                txtDose.setText(element);
                txtDoseStr.setText("supply");
            }else{
                txtDose.setText(txtDose.getText() + "\n" + element);
                txtDoseStr.setText(txtDoseStr.getText() + "\nsupply");
            }
            count++;
        }
        
        // Get Appointment that is held in the selected centre
        List<String> appDataArray = File_Helper.readFolder("Appointment");
        List<Appointment> appointmentList = new ArrayList();
        String[] data = new String[5];
        int countReject;

        appDataArray.forEach(fileInFolder -> {
            appointmentList.add(File_Helper.gsonWriter.fromJson(fileInFolder, Appointment.class));
        });

        for (String element : selectedCentreId) {
            for (Appointment appointment : appointmentList) {
                if (appointment.getCentreId().equals(element) && appointment.getAppointmentDate().isAfter(java.time.LocalDate.now())) {
                    countReject = 0;
                    if (appointment.getCandidateList().size() > 0) {
                        for (Candidate candidate : appointment.getCandidateList()) {
                            if (candidate.getCandidateId().equals(id)) {
                                if (candidate.getApptStatus().equals("Rejected")) {
                                    countReject++;
                                }
                            }
                        }
                    }

                    if (countReject == 0) {
                        data[0] = appointment.getAppointmentId();
                        data[1] = appointment.getAppointmentDate().toString();
                        data[2] = appointment.getAppointmentTime().toString();
                        data[3] = appointment.getVaccineBrand();
                        model.addRow(data);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        String id = lblId.getText();

        if (!id.equals("userIc")) {
            String userData = File_Helper.readFile("User_Account/" + id + ".txt");
            People userFromFile = File_Helper.gsonWriter.fromJson(userData, People.class);

            txtVaccineList.setText("");
            txtDose.setText("");
            txtDoseStr.setText("");

            if (userFromFile.getStatus().equals("Not Vaccinated")) {
                cmbCentre.removeAllItems();
                cmbCentre.addItem("--- Select Centre ---");

                List<String> appDataArray = File_Helper.readFolder("Appointment");
                List<Appointment> appointmentList = new ArrayList();
                ArrayList<String> arrApp = new ArrayList<String>();

                appDataArray.forEach(fileInFolder -> {
                    appointmentList.add(File_Helper.gsonWriter.fromJson(fileInFolder, Appointment.class));
                });

                // Get centre ID
                appointmentList.forEach(f -> {
//                    if ("Public".equals(f.getAppointmentType())) {
                        arrApp.add(f.getCentreId());
//                    }
                });

                // Remove duplicate centre ID
                ArrayList<String> centreList = new ArrayList<String>();

                for (String element : arrApp) {
                    if (!centreList.contains(element)) {
                        centreList.add(element);
                    }
                }

                // Get centre Name
                List<String> centreDataArray = File_Helper.readFolder("Vaccination_Centre");
                List<Vaccination_Centre> centreNameList = new ArrayList();
                ArrayList<String> arrCentreName = new ArrayList<String>();
                ArrayList<String> showCentreName = new ArrayList<String>();

                centreDataArray.forEach(fileInFolder -> {
                    centreNameList.add(File_Helper.gsonWriter.fromJson(fileInFolder, Vaccination_Centre.class));
                });

                for (String element : centreList) {
                    for (Vaccination_Centre centre : centreNameList) {
                        if (centre.getCentreId().equals(element)) {
                            cmbCentre.addItem(centre.getName());
                        }
                    }
                }
            } else if (userFromFile.getStatus().equals("1st Dose Completed")) {
                DefaultTableModel model = (DefaultTableModel) tblAppointment.getModel();
                model.setRowCount(0);
                cmbCentre.removeAllItems();
                cmbCentre.setEnabled(false);
                btnSearch.setEnabled(false);

                List<String> vacHistory = userFromFile.getVacHistory();
                String apt = userFromFile.getVacHistory().get(0);

                String aptData = File_Helper.readFile("Appointment/" + apt + ".txt");
                Appointment aptFromFile = File_Helper.gsonWriter.fromJson(aptData, Appointment.class);
                String centreData = File_Helper.readFile("Vaccination_Centre/" + aptFromFile.getCentreId() + ".txt");
                Vaccination_Centre centreFromFile = File_Helper.gsonWriter.fromJson(centreData, Vaccination_Centre.class);
                
                String centreName = centreFromFile.getName();
                cmbCentre.addItem(centreName);

                Location centreLocation = centreFromFile.getLocation();
                String centreState = centreLocation.getState();
                lblLocation.setText(centreState);

                // Get centre ID
                List<String> centreDataArray = File_Helper.readFolder("Vaccination_Centre");
                List<Vaccination_Centre> centreList = new ArrayList();
                ArrayList<String> selectedCentreId = new ArrayList<String>();

                centreDataArray.forEach(fileInFolder -> {
                    centreList.add(File_Helper.gsonWriter.fromJson(fileInFolder, Vaccination_Centre.class));
                });

                for (int i = 0; i < centreList.size(); i++) {
                    if (centreName.equals(centreList.get(i).getName())) {
                        selectedCentreId.add(centreList.get(i).getCentreId());
                        break;
                    }
                }
                
                List<Stock> stockList = centreFromFile.getStock();
                Vaccine vaccine;
                ArrayList<String> vaccineNames = new ArrayList<String>();
                ArrayList<String> vaccineQuantity = new ArrayList<String>();

                for(int i = 0; i < stockList.size(); i++) {
                    vaccine = stockList.get(i).getVaccine();

                    vaccineNames.add(vaccine.getName());
                    vaccineQuantity.add(String.valueOf(stockList.get(i).getQuantity()));
                }

                // Remove duplicate vaccine details
                ArrayList<String> vacName = new ArrayList<String>();
                ArrayList<String> vacQuantity = new ArrayList<String>();

                for (String element : vaccineNames) {
                    if (!vacName.contains(element)) {

                        vacName.add(element);
                    }
                }

                for (String element : vaccineQuantity) {
                    if (!vacQuantity.contains(element)) {

                        vacQuantity.add(element);
                    }
                }

                int count = 0;
                for (String element : vacName) {
                    if(count == 0){
                        txtVaccineList.setText(element);
                    }else{
                        txtVaccineList.setText(txtVaccineList.getText() + "\n" + element);
                    }
                    count++;
                }

                count = 0;
                for (String element : vacQuantity) {
                    if(count == 0){
                        txtDose.setText(element);
                        txtDoseStr.setText("supply");
                    }else{
                        txtDose.setText(txtDose.getText() + "\n" + element);
                        txtDoseStr.setText(txtDoseStr.getText() + "\nsupply");
                    }
                    count++;
                }

                // Get Appointment that is held in the selected centre
                List<String> appDataArray = File_Helper.readFolder("Appointment");
                List<Appointment> appointmentList = new ArrayList();
                String[] data = new String[5];

                appDataArray.forEach(fileInFolder -> {
                    appointmentList.add(File_Helper.gsonWriter.fromJson(fileInFolder, Appointment.class));
                });

                String aptId = userFromFile.getVacHistory().get(0);
                List<Candidate> candidateList = aptFromFile.getCandidateList();
                String batchNumber = "";

                for (Candidate candidate : candidateList) {
                    if (candidate.getCandidateId().equals(id)) {
                        batchNumber = candidate.getVaccineBatchNumber();
                    }
                }

                Vaccine aptVaccine = new Vaccine();
                aptVaccine = aptVaccine.getVaccine(batchNumber);
                String dose1Vaccine = aptVaccine.getName();
                int waitTime = aptVaccine.getWaitTime();
                LocalDate aptDate, earliestDate;
                String centreId, vaccineBrand;
                int countReject;
                    

                for (String element : selectedCentreId) {
                    for (Appointment appointment : appointmentList) {
                        centreId = appointment.getCentreId();
                        vaccineBrand = appointment.getVaccineBrand();
                        aptDate = appointment.getAppointmentDate();
                        earliestDate = aptFromFile.getAppointmentDate().plusWeeks(waitTime);

                        if (centreId.equals(element) && aptDate.isAfter(earliestDate) && vaccineBrand.equals(dose1Vaccine)) {
                            countReject = 0;
                            if (appointment.getCandidateList().size() > 0) {
                                for (Candidate candidate : appointment.getCandidateList()) {
                                    if (candidate.getCandidateId().equals(id)) {
                                        if (candidate.getApptStatus().equals("Rejected")) {
                                            countReject++;
                                        }
                                    }
                                }
                            }

                            if (countReject == 0) {
                                data[0] = appointment.getAppointmentId();
                                data[1] = appointment.getAppointmentDate().toString();
                                data[2] = appointment.getAppointmentTime().toString();
                                data[3] = appointment.getVaccineBrand();
                                model.addRow(data);
                            }
                        }
                    }
                }

                if (model.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "The centre currently does not open appointment for your dose 2.\nPlease check again after a few days.", "Appointment Message", JOptionPane.INFORMATION_MESSAGE);

                    User_ViewVaccinationStatus viewStatus = new User_ViewVaccinationStatus(id);
                    viewStatus.setVisible(true);
                    this.setVisible(false);
                }

                lblCentre.setText(centreName);
                lblLocation.setText(centreState);

            } else if (userFromFile.getStatus().equals("Fully Vaccinated")) {
                JOptionPane.showMessageDialog(null, "You have fully vaccinated!", "Appointment Message", JOptionPane.INFORMATION_MESSAGE);

                User_ViewVaccinationStatus viewStatus = new User_ViewVaccinationStatus(id);
                viewStatus.setVisible(true);
                this.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(null, "You have ongoing appointment!", "Appointment Message", JOptionPane.INFORMATION_MESSAGE);

                User_ViewVaccinationStatus viewStatus = new User_ViewVaccinationStatus(id);
                viewStatus.setVisible(true);
                this.setVisible(false);
            }
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(User_SubmitAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(User_SubmitAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(User_SubmitAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(User_SubmitAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new User_SubmitAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cmbCentre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblCentre;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblLogout;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblViewProfile;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTextArea txtDose;
    private javax.swing.JTextArea txtDoseStr;
    private javax.swing.JTextArea txtVaccineList;
    private javax.swing.JPanel userHeader;
    // End of variables declaration//GEN-END:variables
}
